<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>REVIEW</title>
    <link rel="stylesheet" href="https://synrc.space/synrc.css" />
</head>

<body>

<nav>
    <a href='https://n2o.space/'>SPEC</a>
    <a href='https://o7.n2o.space'>O7</a>
    <a href='https://sample.n2o.space'>SAMPLE</a>
</nav>

<header>
    <a href="../index.html"><img src="https://n2o.space/img/Synrc Neo.svg"></a>
    <h1>REVIEW</h1>
</header>

<main>
    <section>


<h3>INTRO</h3>

<p>REVIEW is a regular Erlang application.</p>

    </section>
    <section>

<h3>HEADER</h3>

        <figure>
            <figcaption>Picture 1. HOW TO SETUP BOTH APP AND SUP IN ERLANG</figcaption>
            <code>
 -module(review).
 -behaviour(supervisor).
 -behaviour(application).
 -export([init/1, start/0, start/2, stop/1, main/1]).
            </code>
        </figure>

    </section>
    <section>

<h3>OTP</h3>

<p>Note that suring start you should specify mauth module.
   Dafault implementation performs client topic autosubscription.</p>

        <figure>
            <figcaption>Picture 2. Implements Erlang/OTP service API</figcaption>
            <code>
 start()    -> start(normal,[]).
 start(_,_) -> supervisor:start_link({local,review},review,[]).
 stop(_)    -> ok.
            </code>
        </figure>

    </section>
    <section>

<h3>COWBOY</h3>

<p>REVIEW WS application uses COWBOY as a static HTTP server
   and as a WebSocket server.</p>

        <figure>
            <figcaption>Picture 3. COWBOY setup</figcaption>
            <code>
 init([])   -> {ok, {{one_for_one, 5, 10}, [spec()]}}.
 spec()     -> ranch:child_spec(http, 100, ranch_tcp, port(),
                                      cowboy_protocol, env()).

 env()      -> [ { env, [ { dispatch, points() } ]          } ].
 static()   ->   { dir, "priv/static", mime()               }.
 n2o()      ->   { dir, "deps/n2o/priv",           mime()   }.
 mime()     -> [ { mimetypes, cow_mimetypes, all            } ].
 port()     -> [ { port, application:get_env(n2o,port,8001) } ].
 points()   -> cowboy_router:compile([{'_', [
                 { "/n2o/[...]", n2o_static,  n2o()         },
                 { "/app/[...]", n2o_static,  static()      },
                 { "/ws/[...]",  n2o_stream,  []            } ]}]).
            </code>
        </figure>

    </section>
    <section>

<h3>COWBOY2</h3>

<p>COWBOY2 router is slick.</p>

        <figure>
            <figcaption>Picture 4. COWBOY2 setup</figcaption>
            <code>
 init([])   -> {ok, {{one_for_one, 5, 10}, []}}.
 points() -> cowboy_router:compile([{'_', [
	    {"/ws/[...]", n2o_cowboy2, []},
            {"/n2o/[...]", cowboy_static, {priv_dir, n2o, []}},
	    {"/app/[...]", cowboy_static, {dir, "priv/static", []}} ]}]).
            </code>
        </figure>

    </section>
</main>

<footer>
    2005&mdash;2019 &copy; Synrc Research Center
</footer>

</body>
</html>
